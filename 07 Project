To demonstrate AWS DevOps-related services, you can create a CI/CD pipeline for a demo web application using AWS services like CodeCommit, CodeBuild, CodeDeploy, and CodePipeline. This example shows how to automatically build, test, and deploy a simple web application using AWS DevOps tools.

Overview of the Architecture

1. CodeCommit: Repository to store your web application source code.


2. CodeBuild: Service to build and test your application.


3. CodeDeploy: Service to deploy the application to an EC2 instance.


4. CodePipeline: Automates the entire workflow, triggering on code changes.



Step-by-Step Implementation

Step 1: Create the Demo Web Application

We'll create a simple Node.js web application and push it to AWS CodeCommit.

1. Create a Node.js web application

mkdir demo-web-app
cd demo-web-app
npm init -y
npm install express --save


2. Create an app.js file with the following content:

const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, AWS DevOps!');
});

app.listen(port, () => {
  console.log(`App listening at http://localhost:${port}`);
});


3. Create a Dockerfile to containerize the application:

FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "app.js"]


4. Add the buildspec.yml file to define the CodeBuild steps:

version: 0.2

phases:
  install:
    commands:
      - echo Installing dependencies
      - npm install
  build:
    commands:
      - echo Build started on `date`
      - npm run build || true
  post_build:
    commands:
      - echo Build completed on `date`

artifacts:
  files:
    - '**/*'



Step 2: Push Code to CodeCommit

1. Create a CodeCommit Repository:

Go to AWS CodeCommit Console.

Click on Create Repository, name it demo-web-app, and follow the instructions.



2. Push the Code:

Initialize your local repository and push to CodeCommit.


git init
git remote add origin https://git-codecommit.<region>.amazonaws.com/v1/repos/demo-web-app
git add .
git commit -m "Initial commit"
git push origin master



Step 3: Create an EC2 Instance for Deployment

1. Go to AWS EC2 Console and launch an Amazon Linux 2 instance.


2. Install Docker and other dependencies on the EC2 instance:

sudo yum update -y
sudo amazon-linux-extras install docker
sudo service docker start
sudo usermod -a -G docker ec2-user


3. Install and configure the CodeDeploy agent on the EC2 instance:

sudo yum install ruby
cd /home/ec2-user
curl -O https://bucket-name.s3.region.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto
sudo service codedeploy-agent start


4. Create an IAM Role with the AmazonEC2RoleforAWSCodeDeploy policy and attach it to the EC2 instance.



Step 4: Set Up CodeDeploy for Deployment

1. Go to AWS CodeDeploy Console and create an Application.


2. Create a Deployment Group:

Select the application and EC2 instance.

Configure it to deploy to the EC2 instance.



3. Create an appspec.yml file in your project for CodeDeploy:

version: 0.0
os: linux
files:
  - source: /
    destination: /home/ec2-user/app
hooks:
  AfterInstall:
    - location: scripts/start.sh
      timeout: 300
      runas: ec2-user


4. Create a scripts/start.sh file to restart Docker and run the app:

#!/bin/bash
docker stop $(docker ps -q) || true
docker rm $(docker ps -a -q) || true
cd /home/ec2-user/app
docker build -t demo-web-app .
docker run -d -p 80:3000 demo-web-app



Step 5: Set Up CodeBuild to Build the Application

1. Go to AWS CodeBuild Console and create a Build Project.


2. Set Source to the CodeCommit repository.


3. Under Buildspec, either use the buildspec.yml from the repository or define the steps directly in the console.


4. Make sure CodeBuild has access to the necessary IAM roles to interact with CodeCommit and S3.



Step 6: Create CodePipeline to Automate the CI/CD Workflow

1. Go to AWS CodePipeline Console and create a pipeline.


2. Source Stage:

Choose CodeCommit as the source provider.

Select the demo-web-app repository and branch.



3. Build Stage:

Choose CodeBuild as the build provider.

Select the CodeBuild Project you created earlier.



4. Deploy Stage:

Choose CodeDeploy as the deployment provider.

Select the CodeDeploy application and deployment group.




Step 7: Deploy and Test the Application

1. Push changes to the CodeCommit repository:

git add .
git commit -m "Updated application"
git push origin master


2. CodePipeline will automatically trigger:

CodeCommit pushes the code.

CodeBuild builds the Docker image and packages the application.

CodeDeploy deploys the application to the EC2 instance.



3. After successful deployment, visit your EC2 instance's public IP in a browser. The application should display "Hello, AWS DevOps!".



Step 8: Monitor and Manage the Pipeline

1. Use AWS CloudWatch to monitor logs from CodeBuild, CodeDeploy, and EC2.


2. Use CodePipeline for visual monitoring of the pipeline stages.



Summary

In this demo:

We created a simple Node.js web application stored in AWS CodeCommit.

CodeBuild was used to build the Docker image for the application.

CodeDeploy deployed the application to an EC2 instance using a Docker container.

CodePipeline automated the entire CI/CD process, from code changes to deployment.


This setup is highly customizable and can be extended with additional features like tests, security scans, and more complex deployment strategies.

